package mapInterface.hashMap;

public class HotWorkingOfHasMap {

	public static void main(String[] args) {

		/*
		 * TODO:1.hashCode()- it is predefined method in object class
		 * 
		 * a.it returns integer which is hashCode of object, using this has values
		 * objects are stored in HashMap
		 * 
		 * b. objects with same value has same hashCode, and with different values may
		 * have different hashCodes
		 * 
		 * c. when two objects has same hashCode then we can check equality of those
		 * objects by using equals() method, equals() is a method of object
		 * 
		 */

		// case1- same objects has same hashCode and equals() returns true
		String s1 = "abc";
		String s2 = "abc";
		System.out.println(s1.hashCode());
		System.out.println(s2.hashCode());
		System.out.println(s1.equals(s2));

		// case2-different objects has different hashCodes and equals() returns false
		String s3 = "eef";
		String s4 = "wwe";
		System.out.println(s3.hashCode());
		System.out.println(s4.hashCode());
		System.out.println(s3.equals(s4));

		// case3-sometimes different objects has same hashCode but equals() returns
		// false
		String s5 = "Ea";
		String s6 = "FB";
		System.out.println(s5.hashCode());
		System.out.println(s6.hashCode());
		System.out.println(s5.equals(s6));

		/*
		 * TODO: 2. hash()- output of this function is hash value which is integer,
		 * hashValue and hashCode are different, hashValue is smaller and hashCode is
		 * bigger, hashValue is get by doing some operation on hashCode
		 * 
		 * 
		 * 
		 * a. hashing is a technique of hashing keys and values into hashMap by using
		 * hash() function
		 * 
		 * b. it converts key of map into some hashValue(integer value)
		 * 
		 * -----------------keys=>hash()function=> hashValue--------------------------
		 * 
		 * 
		 * #without collision-seperate hasValues are generated by hash() for two keys
		 * 
		 * #collision- same hasValue is generated by hash() for two keys
		 * 
		 * c. hash function takes key as a parameter, creates hashValue by performing
		 * some operations on hasCode of key (key.hasCode()- to get hashCode of key)
		 * 
		 * d.hashValue of null key is always zero
		 * 
		 * 
		 */
	}

}
